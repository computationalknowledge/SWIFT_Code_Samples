/* Learning Outcome: create types which hold pairs of different values */

class Pokemon
{
    var strength:Int        = 0
    var pokemonType:String   = ""
    var pokemonName:String   = ""
}

struct StringPair {
    var first: String
    var second: String
}
 
struct IntPair {
    var first: Int
    var second: Int
}

struct DataPair {
    var first: Pokemon
    var second: Pokemon
}
 
struct FloatPair {
    var first: Float
    var second: Float
}

// Are you getting Bored yet?
// Wouldn't it be better to have just one type which can work with any value? How about this:

struct Pair<T1, T2> {
    var first: T1
    var second: T2
}

let floatFloatPair = Pair<Float, Float>(first: 0.3, second: 0.5)
print(floatFloatPair)
// Pair<Float, Float>(first: 0.300000012, second: 0.5)


